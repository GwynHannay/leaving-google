#------------------------------------------------------------------------------
# File:         exiftool.config
#
# Description:  Exiftool config for Immich migration
#
# Notes:        This example file shows how to define your own shortcuts and
#               add new EXIF, IPTC, XMP, PNG, MIE and Composite tags, as well
#               as how to specify preferred lenses for the LensID tag, and
#               define new file types and default ExifTool option values.
#
#               Note that unknown tags may be extracted even if they aren't
#               defined, but tags must be defined to be written.  Also note
#               that it is possible to override an existing tag definition
#               with a user-defined tag.
#
#               To activate this file, rename it to ".ExifTool_config" and
#               place it in your home directory or the exiftool application
#               directory.  (On Mac and some Windows systems this must be done
#               via the command line since the GUI's may not allow filenames to
#               begin with a dot.  Use the "rename" command in Windows or "mv"
#               on the Mac.)  This causes ExifTool to automatically load the
#               file when run.  Your home directory is determined by the first
#               defined of the following environment variables:
#
#                   1.  EXIFTOOL_HOME
#                   2.  HOME
#                   3.  HOMEDRIVE + HOMEPATH
#                   4.  (the current directory)
#
#               Alternatively, the -config option of the exiftool application
#               may be used to load a specific configuration file (note that
#               this must be the first option on the command line):
#
#                   exiftool -config example.config ...
#
#               This example file defines the following 16 new tags as well as
#               a number of Shortcut and Composite tags:
#
#                   1.  EXIF:NewEXIFTag
#                   2.  GPS:GPSPitch
#                   3.  GPS:GPSRoll
#                   4.  IPTC:NewIPTCTag
#                   5.  XMP-xmp:NewXMPxmpTag
#                   6.  XMP-exif:GPSPitch
#                   7.  XMP-exif:GPSRoll
#                   8.  XMP-GOOG:NewXMPGOOGTag1
#                   9.  XMP-GOOG:NewXMPGOOGTag2
#                  10.  XMP-GOOG:NewXMPGOOGTag3
#                  11.  XMP-GOOG:NewXMPGOOGStruct
#                  12.  PNG:NewPngTag1
#                  13.  PNG:NewPngTag2
#                  14.  PNG:NewPngTag3
#                  15.  MIE-Meta:NewMieTag1
#                  16.  MIE-Test:NewMieTag2
#
#               For detailed information on the definition of tag tables and
#               tag information hashes, see lib/Image/ExifTool/README.
#------------------------------------------------------------------------------

# Shortcut tags are used when extracting information to simplify
# commonly used commands.  They can be used to represent groups
# of tags, or to provide an alias for a tag name.
%Image::ExifTool::UserDefined::Shortcuts = (
    GOOG => ['Title','Description','ImageViews','CreationTime','PhotoTakenTime','GeoData','GeoDataExif','URL','GooglePhotosOrigin','Archived','Favorited'],
    everydate => ['*date*', '*time*'],
    matchtags => ['ImageHeight*', 'ImageWidth*', 'Composite:FocalLength35efl', 'Composite:LightValue', 'MakerNotes:Macro', 'MakerNotes:MacroMode', 'MakerNotes:SceneMode', 'XMP:Make', 'EXIF:Make', 'XMP:Model', 'EXIF:Model'],
);

# NOTE: All tag names used in the following tables are case sensitive.

# The %Image::ExifTool::UserDefined hash defines new tags to be added
# to existing tables.
%Image::ExifTool::UserDefined = (
    # All EXIF tags are added to the Main table, and WriteGroup is used to
    # specify where the tag is written (default is ExifIFD if not specified):
    # new XMP namespaces (eg. GOOG) must be added to the Main XMP table:
    'Image::ExifTool::XMP::Main' => {
        # namespace definition for examples 8 to 11
        GOOG => { # <-- must be the same as the NAMESPACE prefix
            SubDirectory => {
                TagTable => 'Image::ExifTool::UserDefined::GOOG',
                # (see the definition of this table below)
            },
        },
        # add more user-defined XMP namespaces here...
    },
);
# This is a basic example of the definition for a new XMP namespace.
# This table is referenced through a SubDirectory tag definition
# in the %Image::ExifTool::UserDefined definition above.
# The namespace prefix for these tags is 'GOOG', which corresponds to
# an ExifTool family 1 group name of 'XMP-GOOG'.
%Image::ExifTool::UserDefined::GOOG = (
    GROUPS => { 0 => 'XMP', 1 => 'XMP-GOOG', 2 => 'Image' },
    NAMESPACE => { 'GOOG' => 'http://ns.myname.com/GOOG/1.0/' },
    WRITABLE => 'string', # (default to string-type tags)
    # Example 8.  XMP-GOOG:NewXMPGOOGTag1 (an alternate-language tag)
    # - replace "NewXMPGOOGTag1" with your own tag name (eg. "MyTag")
    Title => { Writable => 'string' },
    # Example 9.  XMP-GOOG:NewXMPGOOGTag2 (a string tag in the Author category)
    Description => { Writable => 'string' },
    # Example 10.  XMP-GOOG:NewXMPGOOGTag3 (an unordered List-type tag)
    ImageViews => { Writable => 'integer' },
    # Example 11.  XMP-GOOG:NewXMPGOOGStruct (a structured tag)
    # - example structured XMP tag
    GooglePhotosOrigin => {
        # the "Struct" entry defines the structure fields
        Struct => {
            # optional namespace prefix and URI for structure fields
            # (required only if different than NAMESPACE above)
            # --> multiple entries may exist in this namespace lookup,
            # with the last one alphabetically being the default for
            # the fields, but each field may have a "Namespace"
            # element to specify which prefix to use
            # NAMESPACE => { 'test' => 'http://x.y.z/test/' },
            # optional structure name (used for warning messages only)
            STRUCT_NAME => 'GooglePhotosOrigin',
            # optional rdf:type property for the structure
            # TYPE => 'http://x.y.z/test/xystruct',
            # structure fields (very similar to tag definitions)
            Composition => {
                Struct => {
                    Type  => { },
                },
            },
            FromPartnerSharing => {
                Struct => { },
            },
            FromSharedAlbum => {
                Struct => { },
            },
            WebUpload => {
                Struct => {
                    ComputerUpload  => { Struct => { } },
                    DriveImport  => { Struct => { } },
                },
            },
            # a nested structure...
            MobileUpload => {
                Struct => {
                    DeviceFolder  => { 
                        Struct => { 
                            LocalFolderName => { Writable => 'string' }
                        },
                    },
                    DeviceType => { Writable => 'string' },
                },
            },
        }
    },
    CreationTime => {
        # the "Struct" entry defines the structure fields
        Struct => {
            STRUCT_NAME => 'GooglePhotosCreationTime',
            Timestamp => { Writable => 'integer' },
            Formatted => { Writable => 'string' },
        }
    },
    PhotoTakenTime => {
        # the "Struct" entry defines the structure fields
        Struct => {
            STRUCT_NAME => 'GooglePhotosPhotoTakenTime',
            Timestamp => { Writable => 'integer' },
            Formatted => { Writable => 'string' },
        }
    },
    GeoData => {
        # the "Struct" entry defines the structure fields
        Struct => {
            STRUCT_NAME => 'GooglePhotosGeoData',
            Latitude => { Writable => 'string' },
            Longitude => { Writable => 'string' },
            Altitude => { Writable => 'string' },
            LatitudeSpan => { Writable => 'string' },
            LongitudeSpan => { Writable => 'string' },
        }
    },
    GeoDataExif => {
        # the "Struct" entry defines the structure fields
        Struct => {
            STRUCT_NAME => 'GooglePhotosGeoDataExif',
            Latitude => { Writable => 'string' },
            Longitude => { Writable => 'string' },
            Altitude => { Writable => 'string' },
            LatitudeSpan => { Writable => 'string' },
            LongitudeSpan => { Writable => 'string' },
        }
    },
    URL => { Writable => 'string' },
    Archived => { Writable => 'string' },
    Favorited => { Writable => 'string' }
    # Each field in the structure has a corresponding flattened tag that is
    # generated automatically with an ID made from a concatenation of the
    # original structure tag ID and the field name (after capitalizing the
    # first letter of the field name if necessary).  The Name and/or
    # Description of these flattened tags may be changed if desired, but all
    # other tag properties are taken from the structure field definition.
    # The "Flat" flag must be used when setting the Name or Description of a
    # flattened tag.  For example:
    # NewXMPGOOGStructX => { Name => 'SomeOtherName', Flat => 1 },
);

#------------------------------------------------------------------------------
1;  #end
